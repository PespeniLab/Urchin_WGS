library(sdmpredictors)
library(leaflet)
# List layers avaialble in Bio-ORACLE v2
layers.bio2 <- list_layers( datasets="Bio-ORACLE" )
layers.bio2
# Download environmental data layers (Max. Temperature, Min. Salinity and Min. Nitrates at the sea bottom)
environment.bottom <- load_layers( layercodes = c("BO2_tempmax_bdmean" , "BO2_salinitymin_bdmean", "BO2_nitratemin_bdmean") , equalarea=FALSE, rasterstack=TRUE)
# Download bathymetry
bathymetry <- load_layers("BO_bathymean")
# Generate a data.frame with the sites of interest
my.sites <- data.frame(Name=c("Faro, Portugal, NE Atlantic" , "Maspalomas, Spain, NE Atlantic" , "Guadeloupe, France, Caribbean Sea" , "Havana, Cuba, Caribbean Sea") , Lon=c(-7.873,-15.539,-61.208,-82.537) , Lat=c(37.047, 27.794,15.957,23.040 ) )
my.sites
# Visualise sites of interest in google maps
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=my.sites$Lon, lat=my.sites$Lat, popup=my.sites$Name)
m
# Extract environmental values from layers
my.sites.environment <- data.frame(Name=my.sites$Name , depth=extract(bathymetry,my.sites[,2:3]) , extract(environment.bottom,my.sites[,2:3]) )
.rs.unloadPackage("tidyr")
# Extract environmental values from layers
my.sites.environment <- data.frame(Name=my.sites$Name , depth=extract(bathymetry,my.sites[,2:3]) , extract(environment.bottom,my.sites[,2:3]) )
install.packages("reshape2")
library(reshape2)
# Extract environmental values from layers
my.sites.environment <- data.frame(Name=my.sites$Name , depth=extract(bathymetry,my.sites[,2:3]) , extract(environment.bottom,my.sites[,2:3]) )
library(raster)
# Extract environmental values from layers
my.sites.environment <- data.frame(Name=my.sites$Name , depth=extract(bathymetry,my.sites[,2:3]) , extract(environment.bottom,my.sites[,2:3]) )
my.sites.environment
View(layers.bio2)
# Download environmental data layers (Max. Temperature, Min. Salinity and Min. Nitrates at the sea bottom)
environment.bottom <- load_layers( layercodes = c("BO2_tempmax_bdmean" , "BO2_salinitymin_bdmean", "BO2_nitratemin_bdmean", "BO_ph") , equalarea=FALSE, rasterstack=TRUE)
# Download bathymetry
bathymetry <- load_layers("BO_bathymean")
# Generate a data.frame with the sites of interest
my.sites <- data.frame(Name=c("Faro, Portugal, NE Atlantic" , "Maspalomas, Spain, NE Atlantic" , "Guadeloupe, France, Caribbean Sea" , "Havana, Cuba, Caribbean Sea") , Lon=c(-7.873,-15.539,-61.208,-82.537) , Lat=c(37.047, 27.794,15.957,23.040 ) )
my.sites
# Visualise sites of interest in google maps
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=my.sites$Lon, lat=my.sites$Lat, popup=my.sites$Name)
m
# Extract environmental values from layers
my.sites.environment <- data.frame(Name=my.sites$Name , depth=extract(bathymetry,my.sites[,2:3]) , extract(environment.bottom,my.sites[,2:3]) )
my.sites.environment
View(bathymetry)
my.sites[,2:3]
View(bathymetry)
View(environment.bottom)
setwd("~/Desktop")
library(tidyverse)
# read in LD results file
LdValues <- read_table("resultLDall2.ld")
# calculate LD in 20 kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 20, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 20, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2)
View(LdValues)
library(tidyverse)
setwd("~/Desktop/urchin_adaptation/temp_unorganised")
# read in LD results file
LdValues <- read_table("resultLD.ld")
# calculate LD in 20 kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 20, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 20, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2)
# read in LD results file
LdValues <- read_table("resultLDall2.ld")
# calculate LD in 20 kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 20, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 20, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2)
library(LDheatmap)
mat <- scan('resultLD_heat.ld') # matrix of pairwise LDs, output of PLINK
mat <- matrix(mat, ncol = 100, byrow = TRUE)
locs <- scan('locs_info') # vector of pos info for my SNPs
locs <- scan('locs_info') # vector of pos info for my SNPs
LDheatmap(mat, genetic.distances = locs, color=heat.colors(20))
mat <- scan('resultLD_heat.ld') # matrix of pairwise LDs, output of PLINK
mat <- matrix(mat, ncol = 999, byrow = TRUE)
locs <- scan('locs_info') # vector of pos info for my SNPs
LDheatmap(mat, genetic.distances = locs, color=heat.colors(20))
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 100)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 25)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 25) + geom_vline(xintercept = 2.5)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 100) + geom_vline(xintercept = 2.5)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 50) + geom_vline(xintercept = 2.5)
# calculate LD in 20 kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 5, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 5, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 50) + geom_vline(xintercept = 2.5)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 100) + geom_vline(xintercept = 2.5)
# calculate LD in 20 kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 1, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, 1, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 100) + geom_vline(xintercept = 2.5)
# read in LD results file
LdValues <- read_table("resultLDall2.ld")
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 100) + geom_vline(xintercept = 2.5)
# read in LD results file
LdValues <- read_table("resultLD.ld")
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
xlim(0, 100) + geom_vline(xintercept = 2.5)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 500)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 200)
# read in LD results file
LdValues <- read_table("resultLDall2.ld")
# read in LD results file
LdValues <- read_table("resultLDall.ld")
# read in LD results file
LdValues <- read_table("resultLDall.ld")
# read in LD results file
LdValues <- read_table("resultLD2.ld")
# read in LD results file
LdValues <- read_table("resultLDall.ld")
# read in LD results file
LdValues <- read_table("resultLDall2.ld")
# read in LD results file
LdValues <- read_table("thisit")
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 200)
# read in LD results file
LdValues <- read_table("thisit")
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 200)
# read in LD results file
LdValues <- read_table("resultLDall2.ld")
# read in LD results file
LdValues <- read_table("resultLD.ld")
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 200)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) #+ xlim(0, 200)
average_dist <- 20
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) #+ xlim(0, 200)
# read in LD results file
LdValues <- read_table("resultLDall2.ld")
average_dist <- 20
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) #+ xlim(0, 200)
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 200)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 100)
# read in LD results file
LdValues <- read_table("thisisit.ld")
average_dist <- 20
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) #+ xlim(0, 100)
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) #+ xlim(0, 100)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 100)
# read in LD results file
LdValues <- read_table("resultLD.ld")
average_dist <- 1
# calculate LD in average_dist kb bins to display the trendline
averageLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0)) %>%
group_by(intervals) %>%
summarise_at(vars(R2),funs(mean(., na.rm=TRUE))) %>%
rename(averageR2=R2)
# calculate inter marker distances
fullLD <- LdValues %>%
mutate(markerDistance = abs(BP_B - BP_A)/1000) %>%
dplyr::filter(markerDistance < 5000) %>%
mutate(intervals = cut_width(markerDistance, average_dist, boundary = 0))
#merge the two data sets (full LD info and average per bin)
mergedLD <- full_join(fullLD,averageLD, by = "intervals")
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) #+
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 2.5) + xlim(0, 100)
# visualize LD decay
ggplot(mergedLD) +
geom_point(aes(x=markerDistance, y=R2)) +
geom_line(aes(x=markerDistance, y=averageR2), color="red", size=2) +
geom_vline(xintercept = 3) + xlim(0, 100)
library(LDheatmap)
mat <- scan('resultLD_heat.ld') # matrix of pairwise LDs, output of PLINK
mat <- matrix(mat, ncol = 499, byrow = TRUE)
locs <- scan('locs_info') # vector of pos info for my SNPs
locs <- scan('locs_info') # vector of pos info for my SNPs
LDheatmap(mat, genetic.distances = locs, color=heat.colors(20))
mat
LDheatmap(mat[1:200,1:200], genetic.distances = locs, color=heat.colors(20))
LDheatmap(mat[1:180,1:180], genetic.distances = locs, color=heat.colors(20))
LDheatmap(mat[1:180,1:180], genetic.distances = locs, color=heat.colors(20), add.map=FALSE)
